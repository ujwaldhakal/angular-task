<?php

namespace Tests\Unit;

use App\Http\Services\Email\AbstractEmail;
use Symfony\Component\HttpFoundation\ParameterBag;
use Tests\TestCase;

class AbstractEmailTest extends TestCase
{
    protected $abstractEmail;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->abstractEmail = \Mockery::mock(AbstractEmail::class)->makePartial()->shouldAllowMockingProtectedMethods();
        $this->makePropertyAccessible($this->abstractEmail,'fillable',['email','name','message'],AbstractEmail::class);
        $this->makePropertyAccessible($this->abstractEmail,'params',new ParameterBag(),AbstractEmail::class);
        $this->abstractEmail->setFormData($this->getMockedFormData());
    }

    public function testIfDriversAreSwappingWhenEmailIsNotWorking()
    {
        $this->abstractEmail->shouldReceive('process')->andReturn(false)->once();
        $this->abstractEmail->shouldReceive('isMailSendSuccessfully')->andReturn(false);
        $this->abstractEmail->send();
        $this->assertTrue($this->abstractEmail->hasDriversBeenSwapped());
    }

    public function testIfSenderDataIsReturningCorrectly()
    {
        $this->assertSame('john.doe@example.com',$this->abstractEmail->getSender());
    }

    public function testIfNameIsReturningCorrectly()
    {
        $this->assertSame('john',$this->abstractEmail->getName());
    }

    public function testIfMessageIsReturningCorrectly()
    {
        $this->assertSame('Hello',$this->abstractEmail->getMessage());
    }

    public function makePropertyAccessible(&$object, $property, $value, $class)
    {
        $reflection = new \ReflectionClass($class);
        $property = $reflection->getProperty($property);
        $property->setAccessible(true);
        $property->setValue($object, $value);
    }

    public function getMockedFormData()
    {
        return [
            'name' => 'john',
            'email' => 'john.doe@example.com',
            'message' => 'Hello'
        ];
    }
}
